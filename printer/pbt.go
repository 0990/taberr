package printer

import (
	"bytes"
	"fmt"

	"github.com/davyxu/pbmeta"
	"github.com/davyxu/tabtoy/data"
)

type pbtWriter struct {
	printer *bytes.Buffer
}

func (self *pbtWriter) RepeatedMessageBegin(fd *pbmeta.FieldDescriptor, msg *data.DynamicMessage, indent int) {

}

// Value是消息的字段
func (self *pbtWriter) WriteMessageField(fd *pbmeta.FieldDescriptor, msg *data.DynamicMessage, indent int) {

	pos := self.printer.Len()

	self.printer.WriteString(fmt.Sprintf("%s {", fd.Name()))

	valueWrite := rawWriteMessage(self.printer, self, msg, indent)

	self.printer.WriteString("}")

	// 如果没写入值, 将回滚写入
	if valueWrite == 0 {
		self.printer.Truncate(pos)
	}
}

func (self *pbtWriter) RepeatedMessageEnd(fd *pbmeta.FieldDescriptor, msg *data.DynamicMessage, indent int) {

}

// 普通值
func (self *pbtWriter) WriteValueField(fd *pbmeta.FieldDescriptor, value string, indent int) {

	self.printer.WriteString(fmt.Sprintf("%s: %s", fd.Name(), valueWrapper(fd, value)))
}

func (self *pbtWriter) WriteValueSpliter() {

	self.printer.WriteString(" ")
}

func (self *pbtWriter) WriteMessage(msg *data.DynamicMessage) {

	rawWriteMessage(self.printer, self, msg, 0)
}

func NewPBTWriter(printer *bytes.Buffer) IWriter {

	printer.WriteString("# Generated by github.com/davyxu/tabtoy\n")

	return &pbtWriter{
		printer: printer,
	}
}
