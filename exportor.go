package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"

	"github.com/davyxu/pbmeta"
	"github.com/davyxu/tabtoy/data"
	"github.com/davyxu/tabtoy/filter"
	"github.com/davyxu/tabtoy/printer"
	"github.com/davyxu/tabtoy/scanner"
)

func SetFieldValue(ri *scanner.RecordInfo, fieldName, value string) bool {

	// 转换电子表格的原始值到msg可接受的值
	if afterValue, ok := filter.ValueConvetor(ri.FieldDesc, value); ok {

		fd := ri.FieldMsg.Desc.FieldByName(fieldName)

		if fd == nil {
			log.Errorf("field not exist: %s=%s", fieldName, value)
			return false
		}

		if data.DebuggingLevel >= 2 {
			log.Debugf("	%s=%s", fd.Name(), afterValue)
		}

		// 多值
		if fd.IsRepeated() {
			ri.FieldMsg.AddRepeatedValue(fd, afterValue)

		} else {

			// 单值
			ri.FieldMsg.SetValue(fd, afterValue)
		}

	} else {
		log.Errorf("value convert error: %s=%s", fieldName, value)
		return false
	}

	return true
}

func export(pool *pbmeta.DescriptorPool, inputXls, outputFile string) bool {

	// 显示电子表格到导出文件
	log.Infof("%s -> %s\n", filepath.Base(inputXls), filepath.Base(outputFile))

	// 打开电子表格
	xlsFile := scanner.NewFile(inputXls, pool)

	if xlsFile == nil {
		return false
	}

	var outBuff bytes.Buffer

	// 遍历所有表格sheet
	for _, sheet := range xlsFile.Sheets {

		repChecker := filter.NewRepeatValueChecker()

		// 遍历表格的所有行/列
		fileMsg, ok := sheet.Iterate(func(ri *scanner.RecordInfo) bool {

			// 重复值检查
			repChecker.Check(ri.FieldMeta, ri.FieldDesc, ri.Value)

			// 字符串转结构体
			if filter.Value2Struct(ri.FieldMeta, ri.Value, func(key, value string) {

				SetFieldValue(ri, key, value)
			}) {
				return true
			}

			// 分隔符切分值
			if filter.Value2List(ri.FieldMeta, ri.Value, func(value string) {
				SetFieldValue(ri, ri.FieldDesc.Name(), value)
			}) {
				return true
			}

			return SetFieldValue(ri, ri.FieldDesc.Name(), ri.Value)

		})

		if !ok {
			return false
		}

		if fileMsg != nil {
			// 显示导出Sheet时的名称
			log.Infof("	%s", sheet.Name)
			outBuff.WriteString(printer.WriteProtoBufferText(fileMsg))
		}

	}

	// 创建输出文件
	file, err := os.Create(outputFile)
	if err != nil {
		log.Errorln(err.Error())
		return false
	}

	// 写入文件头
	file.WriteString(fmt.Sprintf("# Generated by github.com/davyxu/tabtoy\n"))
	file.WriteString(outBuff.String())

	file.Close()

	return true
}
