package model

import (
	"bytes"
	"fmt"
	"os"

	"github.com/davyxu/tabtoy/util"
)

type Table struct {
	list []*Record
	buf  bytes.Buffer

	needSpliter bool
}

func (self *Table) Add(r *Record) {
	self.list = append(self.list, r)
}

// StrStruct: [ {  HP: 1}, {  HP: 1}]
func (self *Table) printNode(node *Node, def *FieldDefine) {

	if def != nil && def.IsRepeated {
		self.PrintSpliter(", ")
	} else {
		self.PrintSpliter(" ")
	}

	// 值
	if node.Define == nil {

		self.Printf("%s", valueWrapper(def.Type, node.Value))
		self.needSpliter = true

		for _, child := range node.Child {
			self.printNode(child, def)
		}

	} else {
		// 定义

		if node.Define.IsRepeated {
			self.Printf("%s:[ ", node.Define.Name)
		} else {
			self.Printf("%s: ", node.Define.Name)
		}

		for _, child := range node.Child {
			self.printNode(child, node.Define)
		}

		if node.Define.IsRepeated {
			self.Printf(" ]")
		}
	}

}

func (self *Table) Print(rootName string) bool {

	self.Printf("# Generated by github.com/davyxu/tabtoy\n")

	// 遍历每一行
	for _, r := range self.list {

		self.Printf("%s { ", rootName)

		// 遍历每一列
		for _, node := range r.nodes {

			if node.Define.Name == "Type" {
				a := 1
				a++
			}

			self.printNode(node, node.Define)

		}

		self.Printf(" }\n")

		self.needSpliter = false
	}

	return true

}

func (self *Table) PrintSpliter(spliter string) {
	if self.needSpliter {

		self.Printf("%s", spliter)

		self.needSpliter = false
	}
}

func valueWrapper(t FieldType, v string) string {

	switch t {
	case FieldType_String:
		return util.StringEscape(v)
	}

	return v
}

func (self *Table) Printf(format string, args ...interface{}) {
	self.buf.WriteString(fmt.Sprintf(format, args...))
}

func (self *Table) WriteToFile(filename string) bool {

	// 创建输出文件
	file, err := os.Create(filename)
	if err != nil {
		log.Errorln(err.Error())
		return false
	}

	// 写入文件头

	file.WriteString(self.buf.String())

	file.Close()

	return true
}
