package model

import (
	"bytes"
	"fmt"
	"os"

	"github.com/davyxu/tabtoy/util"
)

type Table struct {
	list []*Record
	buf  bytes.Buffer

	needSpliter bool
}

func (self *Table) Add(r *Record) {
	self.list = append(self.list, r)
}

// StrStruct: [ {  HP: 1 }, {  HP: 1 } ]

func (self *Table) Print(rootName string) bool {

	self.Printf("# Generated by github.com/davyxu/tabtoy\n")

	// 遍历每一行
	for _, r := range self.list {

		self.Printf("%s { ", rootName)

		// 遍历每一列
		for rootFieldIndex, node := range r.nodes {

			if node.Define.IsRepeated {
				self.Printf("%s:[ ", node.Define.Name)
			} else {
				self.Printf("%s: ", node.Define.Name)
			}

			// 普通值
			if node.Define.Type != FieldType_Struct {

				if node.Define.IsRepeated {

					// repeated 值序列
					for arrIndex, valueNode := range node.Child {

						self.Printf("%s", valueWrapper(node.Define.Type, valueNode.Value))

						// 多个值分割
						if arrIndex < len(node.Child)-1 {
							self.Printf(", ")
						}

					}
				} else {
					// 单值
					valueNode := node.Child[0]

					self.Printf("%s", valueWrapper(node.Define.Type, valueNode.Value))

				}

			} else {

				// 遍历repeated的结构体
				for structIndex, structNode := range node.Child {

					// 结构体开始
					self.Printf("{ ")

					// 遍历一个结构体的字段
					for structFieldIndex, fieldNode := range structNode.Child {

						// 值节点总是在第一个
						valueNode := fieldNode.Child[0]

						self.Printf("%s: %s", fieldNode.Define.Name, valueWrapper(fieldNode.Define.Type, valueNode.Value))

						// 结构体字段分割
						if structFieldIndex < len(structNode.Child)-1 {
							self.Printf(", ")
						}

					}

					// 结构体结束
					self.Printf(" }")

					// 多个结构体分割
					if structIndex < len(node.Child)-1 {
						self.Printf(", ")
					}

				}

			}

			if node.Define.IsRepeated {
				self.Printf(" ]")
			}

			// 根字段分割
			if rootFieldIndex < len(r.nodes)-1 {
				self.Printf(", ")
			}

		}

		self.Printf(" }\n")

		self.needSpliter = false
	}

	return true

}

func (self *Table) PrintSpliter(spliter string) {
	if self.needSpliter {

		self.Printf("%s", spliter)

		self.needSpliter = false
	}
}

func valueWrapper(t FieldType, v string) string {

	switch t {
	case FieldType_String:
		return util.StringEscape(v)
	}

	return v
}

func (self *Table) Printf(format string, args ...interface{}) {
	self.buf.WriteString(fmt.Sprintf(format, args...))
}

func (self *Table) WriteToFile(filename string) bool {

	// 创建输出文件
	file, err := os.Create(filename)
	if err != nil {
		log.Errorln(err.Error())
		return false
	}

	// 写入文件头

	file.WriteString(self.buf.String())

	file.Close()

	return true
}
