package printer

import (
	"bytes"
	"io/ioutil"
	"text/template"

	"github.com/davyxu/tabtoy/exportorv2/model"
)

// TODO pbmeta解析换rune的lexer [tabtoy] {{.Comment}}
const protoTemplate = `// Generated by github.com/davyxu/tabtoy
// Version: {{.ToolVersion}}
// DO NOT EDIT!!
{{if ge .ProtoVersion 3}}
syntax = "proto3";
{{end}}
package {{.Package}};
{{range .Messages}}
{{.Kind}} {{.Name}}
{	
{{ if eq .Kind "message" }}	{{range .Fields}}	
	// {{.Comment}}
	{{.Label}}{{.Type}} {{.Name}} = {{.Number}};
{{end}} {{else if eq .Kind "enum"}} {{range .Fields}}
	// {{.Comment}}
	{{.Name}} = {{.Number}};
{{end}}{{end}}
}
{{end}}

`

type fieldModel struct {
	Name    string
	Label   string
	Type    string
	Number  int
	Comment string
}

type messageModel struct {
	Name   string
	Kind   string
	Fields []fieldModel
}

type fileModel struct {
	Package      string
	ProtoVersion int
	ToolVersion  string
	Messages     []messageModel
}

func PrintProto(ts *model.BuildInTypeSet, protoVersion int, toolVersion string, outfile string) bool {

	tpl, err := template.New("proto").Parse(protoTemplate)
	if err != nil {
		log.Errorln(err)
		return false
	}

	var m fileModel

	m.Package = ts.Pragma.Package
	m.ProtoVersion = protoVersion
	m.ToolVersion = toolVersion

	// 遍历所有类型
	for _, bt := range ts.Types {

		var msg messageModel
		msg.Name = bt.Name
		switch bt.Kind {
		case model.BuildInTypeKind_Struct:
			msg.Kind = "message"
		case model.BuildInTypeKind_Enum:
			msg.Kind = "enum"
		default:
			msg.Kind = "unknown"
		}

		// 遍历字段
		for index, fd := range bt.Fields {

			var field fieldModel
			field.Name = fd.Name

			switch bt.Kind {
			case model.BuildInTypeKind_Struct:
				field.Number = index + 1
			case model.BuildInTypeKind_Enum:
				field.Number = int(fd.EnumValue)
			}

			if fd.IsRepeated {
				field.Label = "repeated "
			} else if protoVersion == 2 {
				field.Label = "optional "
			}

			if fd.BuildInType != nil {
				field.Type = fd.BuildInType.Name
			} else {
				field.Type = model.FieldTypeToString(fd.Type)
			}

			field.Comment = fd.Comment

			msg.Fields = append(msg.Fields, field)

		}

		m.Messages = append(m.Messages, msg)
	}

	var buf bytes.Buffer

	err = tpl.Execute(&buf, &m)
	if err != nil {
		log.Errorln(err)
		return false
	}

	ioutil.WriteFile(outfile, buf.Bytes(), 0666)

	return true
}
